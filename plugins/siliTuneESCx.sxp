sys.path.append('./siliUX')

import tkinter
import math
import customtkinter

from ctk_tooltip import *

customtkinter.set_appearance_mode("Dark")  # Modes: "System" (standard), "Dark", "Light"
# customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

def MessageBox(message):
    app = customtkinter.CTk()
    app.attributes("-topmost", 1)
    app.eval("tk::PlaceWindow . center")
    app.title("siliTune (ESCx)")
    app.iconbitmap("siliUX/SiliXcon.ico")
    customtkinter.CTkLabel(app, text=message).pack(padx=20, pady=20)
    customtkinter.CTkButton(app, text=f"OK", command=app.destroy).pack(padx=20, pady=20)
    app.mainloop()


# Connect to the node
try:
    nodeCount = sxapi.search(dummy=1)
    if nodeCount < 1:
        nodeCount2 = sxapi.search()
        if nodeCount2 < 1:
            MessageBox("No nodes found: " + str(nodeCount2))
            raise ValueError()  # no other way to kill the script without exitting emgui
        nodeCount = nodeCount2

except sxapi.error as e:
    # tkinter.messagebox.showerror("Error", "Failed to connect to the device")
    exit()

nodes = []
nodenames = []

for i in range(nodeCount):
    newNode = sxapi.node(i, iomode=3) # TODO explore other iomode options for better responsiveness and safety
    if newNode.hwid().decode()[:3] == "esc":
        nodes.append(newNode)
        nodenames.append(newNode.name.decode() + " (" + newNode.address.decode() + ")")

if len(nodes) < 1:
    MessageBox("None of the nodes is an ESCx member!")
    raise ValueError()  # no other way to kill the script without exitting emgui





# configure grid layout (4x4)
# https://www.pythontutorial.net/tkinter/tkinter-grid/
app = customtkinter.CTk()
app.title("siliTune (ESCx)")
app.attributes("-topmost", 1)
app.geometry(f"{600}x{450}")
app.grid_columnconfigure(6, weight=1)
app.grid_rowconfigure((20,21,22), weight=1)
app.attributes("-topmost", 0)
app.iconbitmap("siliUX/SiliXcon.ico")



app.top_frame = customtkinter.CTkFrame(app, fg_color="transparent")
app.top_frame.grid(row=0, column=0, columnspan=8, rowspan=2, padx=(10, 10), pady=(10, 10), sticky="sew")
app.top_frame.grid_columnconfigure((2,3,4), weight=1)



def node_select_callback(value):
    global my_node
    my_node = nodes[nodenames.index(value)]

def show_emgui():
    sxapi.show()

emgui_switch = customtkinter.CTkButton(app.top_frame, text=f"", command=show_emgui, image=tkinter.PhotoImage(file="siliUX/main.png"), width=5)
emgui_switch.grid(row=0, column=0, padx=(10,0))

def open_term():
    my_node.open("{term}")

term_button = customtkinter.CTkButton(app.top_frame, text="", command=open_term, image=tkinter.PhotoImage(file="siliUX/term.png"), width=5)
term_button.grid(row=0, column=1, padx=(10,0))


nodeselect_button = customtkinter.CTkSegmentedButton(app.top_frame, command=node_select_callback)
nodeselect_button.configure(values=nodenames, selected_color="green")
nodeselect_button.grid(row=0, column=2, pady=5, sticky="e")

#CTkToolTip(nodeselect_button, message="Choose the node you want to bind to. Click the node again to refresh the values.")


# another button might be confusing. User can refresh the values by clicking on the node name.
#refresh_button = customtkinter.CTkButton(app.top_frame, text="", image=tkinter.PhotoImage(file="siliUX/pull.png"), fg_color="green", width=5)
#refresh_button.grid(row=0, column=3, sticky="w")


def change_appearance_mode_event(new_appearance_mode: str):
    customtkinter.set_appearance_mode(new_appearance_mode)

appearance_mode_optionemenu = customtkinter.CTkOptionMenu(app.top_frame, values=["Dark", "Light"], command=change_appearance_mode_event)
appearance_mode_optionemenu.grid(row=0, column=4, padx=10, pady=5, sticky="e")

################################################################################

def param_edit(frame, row, col, size, name, unit, tip):

    label = customtkinter.CTkLabel(frame, text=name, font=customtkinter.CTkFont(size=size, weight="bold"))
    label.grid(row=row, column=col, padx=5, sticky="e")
    CTkToolTip(label, message=tip)

    value = customtkinter.CTkEntry(frame, width=50)
    value.grid(row=row, column=col+1, pady=5)

    unit = customtkinter.CTkLabel(frame, text=unit, font=customtkinter.CTkFont(size=size, weight="bold"))
    unit.grid(row=row, column=col+2, padx=5, sticky="w")
    
    return value

param_edit(app, 3, 2, 15, "ipeak", "[A]", "Peak current threshold. An intervention takes place once the phase current crosses this threshold and the 'over-current condition' is signalled.")
param_edit(app, 4, 2, 15, "iref", "[A]", "Reference phase current. This is the most fundamental constant that defines the maximum stator current magnitude in all control modes.")
param_edit(app, 5, 2, 15, "irefr", "[A]", "Reference phase current in voltage braking modes. Set to zero to use 'iref' (as a default).")
param_edit(app, 6, 2, 15, "uref", "[V]", "Reference phase voltage for torque genrating axis. Set to zero to use the entire available voltage (as a default).")
param_edit(app, 7, 2, 15, "rref", "[RPM]", "Reference motor speed for speed control modes. Set to zero to use the entire available speed range (as a default).")

label = customtkinter.CTkLabel(app, text="init as", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=8, column=2, padx=5, sticky="e")

CTkToolTip(label, message="Choose and perform the driver initialization for a particular motor sensor.\nThe selection executes the reinit command.")

prestbox = customtkinter.CTkComboBox(app, width=100, values=["deinit", "async", "sensorless", "hall", "sincos", "resolver", "ssi", "biss", "biss32", "ssi32", "encoder"])
prestbox.grid(row=8, column=3, columnspan=2, pady=5)
        
        
ident_button = customtkinter.CTkButton(app, text=f"Automatic\nidentification ...")
ident_button.grid(row=10, column=2, columnspan=3, rowspan=12, padx=(10,0), pady=10, sticky="nsew")
        
################################################################################

app.tabview = customtkinter.CTkTabview(app, width=200, height=200)
app.tabview.grid(row=2, column=6, rowspan=20, padx=10, sticky="nsew")

tab = app.tabview.add("Motor")
#app.tabview.tab(name).grid_columnconfigure((0,1,2,3), weight=1)
label = customtkinter.CTkLabel(tab, text="Electrical", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 1, 12, "psi", "[Wb]", "Permanent magnet flux linkage")
param_edit(tab, 3, 1, 12, "Lq", "[H]", "Q-axis inductance in star model")
param_edit(tab, 4, 1, 12, "Ld", "[H]", "D-axis inductance in star model")
param_edit(tab, 5, 1, 12, "Rt", "[Ohm]", "stator resistance in star model")


label = customtkinter.CTkLabel(tab, text="Mechanical", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=10, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 10, 12, "pp", "[pairs]", "pole pair count")
picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/motor.png"), compound="left")
picture.grid(row=3, column=10, rowspan=10, columnspan=3,  padx=10, pady=10, sticky="nsew")


label = customtkinter.CTkLabel(tab, text="Derating", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 15, 12, "Da", "[1/A]", "aligned inductance derating")
param_edit(tab, 3, 15, 12, "Dc", "[1/A]", "cross-inductance derating")
param_edit(tab, 4, 15, 12, "Dp", "[1/K]", "PM flux derating")
param_edit(tab, 5, 15, 12, "Dt", "[1/K]", "Resistance derating")


tab = app.tabview.add("Supply")

label = customtkinter.CTkLabel(tab, text="Precharge", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 1, 12, "pchg1", "[V]", "Precharge voltage the controller tries to reach at initialization after booting.")
param_edit(tab, 3, 1, 12, "pchg2", "[V]", "Precharge voltage the controller tries to reach at manually requested initialization.")
param_edit(tab, 4, 1, 12, "pchgtim", "[ms]", "The maximum duration of the precharge phase (absolute value).")

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/battery.png"), compound="left")
picture.grid(row=1, column=10, rowspan=10, padx=10, pady=10, sticky="nsew")

tab = app.tabview.add("PID")

label = customtkinter.CTkLabel(tab, text="Q-current", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 1, 12, "P", "", "Q-axis porportional term")
param_edit(tab, 3, 1, 12, "I", "", "Q-axis integral term")

label = customtkinter.CTkLabel(tab, text="D-current", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=4, column=1, columnspan=3, padx=5, sticky="w")
param_edit(tab, 5, 1, 12, "P", "", "D-axis proportional term")
param_edit(tab, 6, 1, 12, "I", "", "Q-axis proportional term")

label = customtkinter.CTkLabel(tab, text="Speed loop", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 15, 12, "P", "", "porportional term")
param_edit(tab, 3, 15, 12, "I", "", "integral term")
param_edit(tab, 4, 15, 12, "D", "", "derivative term")
param_edit(tab, 5, 15, 12, "Td", "", "derivative filtering term")

label = customtkinter.CTkLabel(tab, text="Position loop", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=30, columnspan=3, padx=5, sticky="w")
param_edit(tab, 2, 30, 12, "P", "", "porportional term")
param_edit(tab, 3, 30, 12, "I", "", "integral term")
param_edit(tab, 4, 30, 12, "D", "", "derivative term")
param_edit(tab, 5, 30, 12, "Td", "", "derivative filtering term")

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/pid.png"), compound="left")
picture.grid(row=2, column=35, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")


tab = app.tabview.add("REST")

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/rest.png"), compound="left")
picture.grid(row=2, column=35, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")


tab = app.tabview.add("DAC")

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/flux.png"), compound="left")
picture.grid(row=2, column=35, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")

tab = app.tabview.add("Limiter")

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/limiter.png"), compound="left")
picture.grid(row=2, column=35, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")


################################################################################

app.bottom_frame = customtkinter.CTkFrame(app, fg_color="transparent")
app.bottom_frame.grid(row=22, column=0, columnspan=8, rowspan=2, pady=(5,15),  sticky="s")
app.bottom_frame.grid_columnconfigure((1,2,3), weight=1)

save_button = customtkinter.CTkButton(app.bottom_frame, text=f"Save to flash !\n(make it final)", fg_color="red")
save_button.grid(row=1, column=1, padx=10, sticky="nsew")

load_button = customtkinter.CTkButton(app.bottom_frame, text=f"Load from flash !\n(discard changes)", fg_color="green")
load_button.grid(row=1, column=2, padx=10, sticky="nsew")

restore_button = customtkinter.CTkButton(app.bottom_frame, text=f"Restore to defaults !\n(start over)")
restore_button.grid(row=1, column=3, padx=10, sticky="nsew")

app.mainloop()
