sys.path.append('./siliUX')

import tkinter
import math
import customtkinter
import codetostr

from ctk_tooltip import *

# customtkinter.set_appearance_mode("Dark")  # Modes: "System" (standard), "Dark", "Light"
# customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

################################################################################


def advSwitch():
    if checkbox_adv.get():
        accelBox.configure(state="normal")
        currentBox.configure(state="normal")
        durationBox.configure(state="normal")
        cyclesBox.configure(state="normal")
        checkbox_nlin.configure(state="normal")
        checkbox_scope.configure(state="normal")
        identsatButton.configure(state="normal")
        identsalButton.configure(state="normal")
    else:
        accelBox.configure(state="disabled")
        currentBox.configure(state="disabled")
        durationBox.configure(state="disabled")
        cyclesBox.configure(state="disabled")
        checkbox_nlin.configure(state="disabled")
        checkbox_scope.configure(state="disabled")
        identsatButton.configure(state="disabled")
        identsalButton.configure(state="disabled")


def AutomaticIdentification():
    app = customtkinter.CTk()
    #app.attributes("-topmost", 1)
    #app.eval("tk::PlaceWindow . center")
    x, y = app.winfo_pointerxy()
    app.geometry(f"{600}x{600}+{x}+{y}")
    app.title("Automatic motor identification")
    app.iconbitmap("siliUX/SiliXcon.ico")
    #customtkinter.CTkLabel(app, text="ahoj").pack(padx=20, pady=20)
    app.grid_rowconfigure((0), weight=1)
    app.grid_columnconfigure((0,1,2,3), weight=1)

    outputBox = customtkinter.CTkTextbox(app)
    outputBox.grid(row=0, column=0, columnspan=4, sticky="nsew", padx=10, pady=10)

    outputBox.insert("0.0", "The system offers a few procedures for measuring motor parameters. You can start them from below.\n\n"
                            "HINTS:\n"
                            " - Usually, a successful 'identlin' followed by 'identrun' is enough for basic setup.\n"
                            " - The resulting values will be stored as corresponding parameters (in /motor and /rest folders).\n"
                            " - The controller must be powered with sufficient current and within the operating voltage range.\n"
                            " - The sensor learning during 'identrun' is a convergent procedure. Repeat multiple times if needed.\n"
                            " - No limiters/warnings must be active before starting a procedure.\n"
                            "\nCAUTION:\n"
                            " - The rotor must be load-free (self-inertia-only) for all procedures !\n"
                            " - The motor may spin, shake and make noise ! Do not use when engaged within a vehicle !\n"
                            " - Do not forget saving new values to flash before reboot !\n"
                            "\nADVANCED:\n"
                            " - In case of unstability, adjust the PID settings and/or 'iref' value.\n"
                            " - 'identrun' of a back-driven motor can be done by setting acceleration to zero.\n"
                            " - If the rotor fails to spin up with 'identrun', adjust the acceleration, current and duration values.\n"
                            " - 'identrun', 'identsat' and 'identsal' sends recorded data to SCOPE tool for visualisation.\n"
                            " - 'identsat' and 'identsal' are for reference only and do not store any values.\n")


    identlinButton = customtkinter.CTkButton(app, text=f"1. IdentLin ...", command=app.destroy,  border_width=2)
    identlinButton.grid(row=2, column=0, padx=10, pady=10)
    CTkToolTip(identlinButton, message="Measure the motor inductance (Lq, Ld) and resistance (Rt).\nOptionally, derating parameters (Da, Dc) can be evaulated too.")

    identrunButton = customtkinter.CTkButton(app, text=f"2. IdentRun ...", command=app.destroy,  border_width=2)
    identrunButton.grid(row=2, column=1, padx=10, pady=10)
    CTkToolTip(identrunButton, message="Measure the motor KV (psi) and, mapping parameters of the selected shaft sensor.\nFor some types of sensors, identrun must be performed multiple times.")


    global checkbox_adv, accelBox, currentBox, durationBox, cyclesBox, checkbox_nlin, checkbox_scope, identsatButton, identsalButton

    checkbox_adv = customtkinter.CTkSwitch(app, text="Advanced", command=advSwitch)
    checkbox_adv.grid(row=2, column=2, padx=10, pady=10)

    adv_frame = customtkinter.CTkFrame(app, fg_color="transparent", border_width=2)
    adv_frame.grid(row=5, column=0, columnspan=4,padx=(10, 10), pady=(10, 10), sticky="sew")
    adv_frame.grid_columnconfigure((1,2,3,4,5,6,7,8,9,10), weight=1)

    identsatButton = customtkinter.CTkButton(adv_frame, text=f"IdentSat ...", width=5, command=app.destroy, state="disabled")
    identsatButton.grid(row=0, column=10, padx=10, pady=10)
    CTkToolTip(identsatButton, message="Measure and display the motor magnetic saturation (dependency of the inductances to the stator current).")

    identsalButton = customtkinter.CTkButton(adv_frame, text=f"IdentSal ...", width=5, command=app.destroy, state="disabled")
    identsalButton.grid(row=1, column=10, padx=10, pady=10)
    CTkToolTip(identsalButton, message="Measure and display the motor saliency (dependency of the inductances to the rotor electrical angle).")

    checkbox_nlin = customtkinter.CTkCheckBox(adv_frame, text="Measure Da, Dc", state="disabled")
    checkbox_nlin.grid(row=0, column=1, padx=10, pady=10, sticky="w")
    CTkToolTip(checkbox_nlin, message="Attempt to find the inductance derating parameters during identlin.")

    checkbox_scope = customtkinter.CTkCheckBox(adv_frame, text="Start scope", state="disabled")
    checkbox_scope.grid(row=1, column=1, padx=10, pady=10, sticky="w")
    checkbox_scope.select()
    CTkToolTip(checkbox_scope, message="Start an instance of the scope tool before relevant procedures.")


    i = 2
    j = 0
    customtkinter.CTkLabel(adv_frame, text="Accel", text_color="grey").grid(row=j, column=i, sticky="e")
    accelBox = customtkinter.CTkEntry(adv_frame, width=40, state="disabled")
    accelBox.grid(row=j, column=i+1, pady=5, padx=3, sticky="ew")
    customtkinter.CTkLabel(adv_frame, text="[rad/s/s]", text_color="grey").grid(row=j, column=i+2, sticky="w")
    CTkToolTip(accelBox, message="Override the acceleration speed in synchronous spinup during identrun (default 100).")

    i = 2
    j = 1
    customtkinter.CTkLabel(adv_frame, text="Current", text_color="grey").grid(row=j, column=i, sticky="e")
    currentBox = customtkinter.CTkEntry(adv_frame, width=40, state="disabled")
    currentBox.grid(row=j, column=i+1, pady=5, padx=3, sticky="ew")
    customtkinter.CTkLabel(adv_frame, text="[A]", text_color="grey").grid(row=j, column=i+2, sticky="w")
    CTkToolTip(currentBox, message="Override the maximum current for the procedures (default iref/4).")

    i = 6
    j = 0
    customtkinter.CTkLabel(adv_frame, text="Duration", text_color="grey").grid(row=j, column=i, sticky="e")
    durationBox = customtkinter.CTkEntry(adv_frame, width=40, state="disabled")
    durationBox.grid(row=j, column=i+1, pady=5, padx=3, sticky="ew")
    customtkinter.CTkLabel(adv_frame, text="[ms]", text_color="grey").grid(row=j, column=i+2, sticky="w")
    CTkToolTip(durationBox, message="Define the spinup time for identrun (default 4000 ms).")

    i = 6
    j = 1
    customtkinter.CTkLabel(adv_frame, text="Cycles", text_color="grey").grid(row=j, column=i, sticky="e")
    cyclesBox = customtkinter.CTkEntry(adv_frame, width=40, state="disabled")
    cyclesBox.grid(row=j, column=i+1, pady=5, padx=3, sticky="ew")
    #customtkinter.CTkLabel(adv_frame, text="[A]").grid(row=j, column=i+2, sticky="w")
    CTkToolTip(cyclesBox, message="Override the procedure tick time.")

    retlabel = customtkinter.CTkLabel(app, text="Status bar", font=customtkinter.CTkFont(weight="bold"), corner_radius=5, compound="left", fg_color=("gray78", "gray23"))
    retlabel.grid(row=6, column=0, columnspan=4, padx=(10,10), pady=5, sticky="nsew")
    CTkToolTip(retlabel, message="The result and value of the lastly issued command.")

    app.mainloop()

################################################################################

import find_nodes
nodes, nodenames = find_nodes.find("esc")

# configure grid layout (4x4)
# https://www.pythontutorial.net/tkinter/tkinter-grid/
app = customtkinter.CTk()
app.title("siliTune (ESCx)")
app.attributes("-topmost", 1)
x, y = app.winfo_pointerxy()
app.geometry(f"{700}x{450}+{x}+{y}")
app.grid_columnconfigure(6, weight=1)
app.grid_rowconfigure((20,21,22), weight=1)
app.attributes("-topmost", 0)
app.iconbitmap("siliUX/SiliXcon.ico")


################################################################################

main_params = []
motor_params = []
supply_params = []
pid_params = []
rest_params = []
dac_params = []
#limiter_params = []
limiter2_params = []


app.top_frame = customtkinter.CTkFrame(app, fg_color="transparent")
app.top_frame.grid(row=0, column=0, columnspan=8, rowspan=2, padx=(10, 10), pady=(10, 10), sticky="sew")
app.top_frame.grid_columnconfigure((3,4,5), weight=1)


app.tabview = 0

def tabview_callback():
    if app.tabview.get() == "Motor":
        params = motor_params
    elif app.tabview.get() == "Battery":
        params = supply_params
    elif app.tabview.get() == "PID":
        params = pid_params
    elif app.tabview.get() == "REST":
        params = rest_params
    elif app.tabview.get() == "DAC":
        params = dac_params
    elif app.tabview.get() == "Advanced":
        params = limiter2_params

    for i in range(len(params)):
       params[i].get()

def refresh_prest() :
    prest = my_node.variable("/driver/prest")
    prestval = prest.get() & 0x0F
    prestbox.set(initmodes[prestval+2])

def refresh() :
    for i in range(len(main_params)):
        main_params[i].get()

    refresh_prest()
    tabview_callback()

def node_select_callback(value):
    global my_node
    nodeselect_button.configure(selected_color="red")

    if value in nodenames:
        my_node = nodes[nodenames.index(value)]
        refresh()
        nodeselect_button.configure(selected_color="green")
    else:
        my_node = 0

def show_emgui():
    sxapi.show()

emgui_switch = customtkinter.CTkButton(app.top_frame, text=f"emgui", command=show_emgui, image=tkinter.PhotoImage(file="siliUX/main.png"), width=5)
emgui_switch.grid(row=0, column=0, padx=(10,0))

def open_term():
    my_node.open("{term}")

term_button = customtkinter.CTkButton(app.top_frame, text="term", command=open_term, image=tkinter.PhotoImage(file="siliUX/term.png"), width=5)
term_button.grid(row=0, column=1, padx=(10,0))



nodeselect_label = customtkinter.CTkLabel(app.top_frame, text="Select device to tune:", font=customtkinter.CTkFont(size=15, weight="bold"))
nodeselect_label.grid(row=0, column=3, padx=10, sticky="e")

nodeselect_button = customtkinter.CTkSegmentedButton(app.top_frame, command=node_select_callback)
nodeselect_button.configure(values=nodenames + ["NONE"])
nodeselect_button.grid(row=0, column=4, pady=5, sticky="w")

#nodeselect_button.bind('<ButtonPress>', node_select_callback)

#CTkToolTip(nodeselect_button, message="Choose the node you want to bind to. Click the node again to refresh the values.")


# another button might be confusing. User can refresh the values by clicking on the node name.
#refresh_button = customtkinter.CTkButton(app.top_frame, text="", image=tkinter.PhotoImage(file="siliUX/pull.png"), fg_color="green", width=5)
#refresh_button.grid(row=0, column=3, sticky="w")


icon_light=tkinter.PhotoImage(file="siliUX/light.png")
icon_dark=tkinter.PhotoImage(file="siliUX/dark.png")

apperance = 0
def change_appearance_mode_event():
    global apperance
    if apperance:
        customtkinter.set_appearance_mode("light")
        apperance_switch.configure(image=icon_dark)
        apperance = 0
    else:
        customtkinter.set_appearance_mode("dark")
        apperance_switch.configure(image=icon_light)
        apperance = 1

apperance_switch = customtkinter.CTkButton(app.top_frame, text=f"", command=change_appearance_mode_event, image=icon_dark, width=5)
apperance_switch.grid(row=0, column=5, padx=5, pady=5, sticky="e")

################################################################################
class param_edit:

    def __init__(self, frame, row, col, size, scale, path, unit, tip):

        self.path = path
        parts = path.split('/')
        name = parts[-1] if parts else ''

        label = customtkinter.CTkLabel(frame, text=name, font=customtkinter.CTkFont(size=size, weight="bold"))
        label.grid(row=row, column=col, padx=5, sticky="e")
        CTkToolTip(label, message=tip)

        #TODO depending on the type/scale, also consider integer/double
        self.scale = scale
        if scale:
            self.entry_var = tkinter.DoubleVar()
        else:
            self.entry_var = tkinter.StringVar()

        self.valueBox = customtkinter.CTkEntry(frame, width=50, textvariable=self.entry_var)
        self.valueBox.grid(row=row, column=col+1, pady=5)

        self.valueBox.bind('<Return>', self.on_set)
        self.valueBox.bind('<FocusOut>', self.on_set)
        self.valueBox.bind('<Escape>', self.get)
        self.valueBox.bind('<KeyPress>', self.on_modified)

        unit = customtkinter.CTkLabel(frame, text=unit, font=customtkinter.CTkFont(size=size, weight="bold"))
        unit.grid(row=row, column=col+2, padx=5, sticky="w")

    def on_modified(self, *args):
        self.valueBox.configure(text_color="blue")

    def on_set(self, *args):
        variable = my_node.variable(self.path)

        if self.scale :
            #get with conversion (to local number)
            variable.set(self.entry_var.get() / self.scale)
        else :
            #parse from the text, all conversion happens in the SXAPI (we do not work with scales here)
            variable.parse(self.entry_var.get())
        self.get()

    def get(self, *args):
        self.valueBox.configure(text_color="SystemWindowText")
        try:
            variable = my_node.variable(self.path)

            if self.scale :
                self.entry_var.set(variable.get() * self.scale)
            else :
                self.entry_var.set(variable.get())

        except sxapi.error as e:
            self.entry_var.set("N/A")

main_params.append(param_edit(app, 3, 2, 15, 0, "/driver/ipeak", "[A]", "Peak current threshold. An intervention takes place once the phase current crosses this threshold and the 'over-current condition' is signalled."))
main_params.append(param_edit(app, 4, 2, 15, 0, "/driver/iref", "[A]", "Reference phase current. This is the most fundamental constant that defines the maximum stator current magnitude in all control modes."))
main_params.append(param_edit(app, 5, 2, 15, 0, "/driver/irefr", "[A]", "Reference phase current in voltage braking modes. Set to zero to use 'iref' (as a default)."))
main_params.append(param_edit(app, 6, 2, 15, 0, "/driver/uref", "[V]", "Reference phase voltage for torque genrating axis. Set to zero to use the entire available voltage (as a default)."))
main_params.append(param_edit(app, 7, 2, 15, 0, "/driver/rref", "[RPM]", "Reference motor speed for speed control modes. Set to zero to use the entire available speed range (as a default)."))

label = customtkinter.CTkLabel(app, text="init as", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=8, column=2, padx=5, sticky="e")

CTkToolTip(label, message="Choose and perform the driver initialization for a particular motor sensor.\nThe selection executes the reinit command.")

initmodes = ["Re-init !", "De-init !", "async", "sensorless", "hall", "sincos", "resolver", "ssi", "biss", "biss32", "ssi32", "res", "encoder"]

def reinit(value) :
    mode = initmodes.index(value) - 2
    if mode == -2:
        retval = my_node.executeSimple("reinit")
    else:
        retval = my_node.executeSimple("reinit", str(mode))

    refresh_prest()

    if retval == -1000:
        find_nodes.MessageBox("Driver was deinitialized!")
    elif retval != 0:
        find_nodes.MessageBox("Driver initialization resulted with error " + str(retval) + "\n" + codetostr.error2string(retval))
    else:
        find_nodes.MessageBox("Driver initialization successful!")

prestbox = customtkinter.CTkOptionMenu(app, width=100,  values=initmodes, command=reinit)
#prestbox = customtkinter.CTkComboBox(app, width=100, values=initmodes, command=reinit)
#prestbox.set("reinit")
prestbox.grid(row=8, column=3, columnspan=2, pady=5)

#reinit_button = customtkinter.CTkButton(app, text=f"Reinit !")
#reinit_button.grid(row=9, column=2, columnspan=3, padx=(10, 0), sticky="nsew")


ident_button = customtkinter.CTkButton(app, text=f"Automatic\nidentification ...", command = AutomaticIdentification)
ident_button.grid(row=10, column=2, columnspan=3, rowspan=12, padx=(10,0), pady=10, sticky="nsew")

################################################################################

app.tabview = customtkinter.CTkTabview(app, width=200, height=200, command=tabview_callback)
app.tabview.grid(row=2, column=6, rowspan=20, padx=10, sticky="nsew")

tab = app.tabview.add("Motor")
tab.grid_columnconfigure((1,2,3,15,16,17,35,36,37), weight=1)

label = customtkinter.CTkLabel(tab, text="Speed limit", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="we")
motor_params.append(param_edit(tab, 2, 1, 12, 0, "/driver/limiter/rpos", "[RPM]", "Maximum positive motor speed. <0:disable>"))
motor_params.append(param_edit(tab, 3, 1, 12, 0, "/driver/limiter/rneg", "[RPM]", "Maximum negative motor speed. <0:disable>"))
motor_params.append(param_edit(tab, 4, 1, 12, 0, "/driver/limiter/rdec", "[RPM]", "Speed limiter decrement rate."))
motor_params.append(param_edit(tab, 5, 1, 12, 0, "/driver/limiter/rgain", "", "Speed limiter time sensitivity."))

label = customtkinter.CTkLabel(tab, text="Topology", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="we")
motor_params.append(param_edit(tab, 2, 15, 12, 0, "/driver/motor/pp", "[pairs]", "pole pair count"))
picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/motor.png"), compound="left")
picture.grid(row=3, column=15, rowspan=10, columnspan=3,  padx=10, pady=10, sticky="nsew")


label = customtkinter.CTkLabel(tab, text="Temperature limit", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=35, columnspan=3, padx=5, sticky="we")
motor_params.append(param_edit(tab, 2, 35, 12, 0, "/driver/limiter/mtemplo", "[Ohm]", "Motor temperature low threshold. <0:disable>"))
motor_params.append(param_edit(tab, 3, 35, 12, 0, "/driver/limiter/mtemphi", "[Ohm]", "Motor temperature high threshold. <0:disable>"))
motor_params.append(param_edit(tab, 4, 35, 12, 0, "/driver/limiter/mtempgain", "", "Motor temperature limiter time sensitivity."))



################################################################################

tab = app.tabview.add("Battery")
tab.grid_columnconfigure((1,2,3,15,16,17,35,36,37), weight=1)

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/battery.png"), compound="left")
picture.grid(row=1, column=20, rowspan=10, padx=10, pady=10, sticky="nsew")

label = customtkinter.CTkLabel(tab, text="Current limit", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="we")
supply_params.append(param_edit(tab, 2, 1, 12, 0, "/driver/limiter/ibpos", "[A]", "Maximum battery discharge current. <0:disable>"))
supply_params.append(param_edit(tab, 3, 1, 12, 0, "/driver/limiter/ibneg", "[A]", "Maximum battery charge current. Use negative number. <0:disable>"))
supply_params.append(param_edit(tab, 4, 1, 12, 0, "/driver/limiter/ibgain", "", "Battery current limiter time sensitivity."))

label = customtkinter.CTkLabel(tab, text="Voltage limit", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="we")
supply_params.append(param_edit(tab, 2, 15, 12, 0, "/driver/limiter/ubmax", "[V]", "Maximum battery voltage. <0:disable>"))
supply_params.append(param_edit(tab, 3, 15, 12, 0, "/driver/limiter/ubmin", "[V]", "Minimum battery voltage. <0:disable>"))
supply_params.append(param_edit(tab, 4, 15, 12, 0, "/driver/limiter/ubgain", "", "Battery voltage limiter time sensitivity."))

label = customtkinter.CTkLabel(tab, text="Precharge", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=35, columnspan=3, padx=5, sticky="we")
supply_params.append(param_edit(tab, 2, 35, 12, 0, "/driver/supply/pchg1", "[V]", "Precharge voltage the controller tries to reach at initialization after booting. <0:disable>"))
supply_params.append(param_edit(tab, 3, 35, 12, 0, "/driver/supply/pchg2", "[V]", "Precharge voltage the controller tries to reach at manually requested initialization. <0:disable>"))
supply_params.append(param_edit(tab, 4, 35, 12, 0, "/driver/supply/pchgtim", "[ms]", "The maximum duration of the precharge phase (absolute value). <0:disable>"))

################################################################################

tab = app.tabview.add("PID")
tab.grid_columnconfigure((1,2,3,15,16,17,35,36,37), weight=1)

label = customtkinter.CTkLabel(tab, text="Q-current", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="we")
pid_params.append(param_edit(tab, 2, 1, 12, 0, "/driver/pid_iq/P", "", "Q-axis porportional term"))
pid_params.append(param_edit(tab, 3, 1, 12, 0, "/driver/pid_iq/I", "", "Q-axis integral term"))

label = customtkinter.CTkLabel(tab, text="D-current", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=4, column=1, columnspan=3, padx=5, sticky="we")
pid_params.append(param_edit(tab, 5, 1, 12, 0, "/driver/pid_id/P", "", "D-axis proportional term"))
pid_params.append(param_edit(tab, 6, 1, 12, 0, "/driver/pid_id/I", "", "Q-axis integral term"))

label = customtkinter.CTkLabel(tab, text="Speed loop", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="we")
pid_params.append(param_edit(tab, 2, 15, 12, 0, "/driver/pid_speed/P", "", "porportional term"))
pid_params.append(param_edit(tab, 3, 15, 12, 0, "/driver/pid_speed/I", "", "integral term"))
pid_params.append(param_edit(tab, 4, 15, 12, 0, "/driver/pid_speed/D", "", "derivative term"))
pid_params.append(param_edit(tab, 5, 15, 12, 0, "/driver/pid_speed/Td", "", "derivative filtering term"))

label = customtkinter.CTkLabel(tab, text="Position loop", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=30, columnspan=3, padx=5, sticky="we")
pid_params.append(param_edit(tab, 2, 30, 12, 0, "/driver/pid_position/P", "", "porportional term"))
pid_params.append(param_edit(tab, 3, 30, 12, 0, "/driver/pid_position/I", "", "integral term"))
pid_params.append(param_edit(tab, 4, 30, 12, 0, "/driver/pid_position/D", "", "derivative term"))
pid_params.append(param_edit(tab, 5, 30, 12, 0, "/driver/pid_position/Td", "", "derivative filtering term"))

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/pid.png"), compound="left")
picture.grid(row=2, column=35, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")

################################################################################


################################################################################

tab = app.tabview.add("DAC")
tab.grid_columnconfigure((1,2,3,15,16,17,35,36,37), weight=1)

label = customtkinter.CTkLabel(tab, text="Flux weakening", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="we")
dac_params.append(param_edit(tab, 2, 1, 12, 0, "/driver/dac/fwc", "[.iref]", "Maximum d-axis current for field weakening. <0:disable>"))
dac_params.append(param_edit(tab, 3, 1, 12, 0, "/driver/dac/fwm", "[.uref]", "Flux weakening engage threshold."))
dac_params.append(param_edit(tab, 4, 1, 12, 0, "/driver/dac/fwr", "[.uref]", "Flux weakening release threshold."))
dac_params.append(param_edit(tab, 5, 1, 12, 0, "/driver/dac/fwd", "", "Flux weakening integrator gain."))

label = customtkinter.CTkLabel(tab, text="Reluctance torque", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="we")
dac_params.append(param_edit(tab, 2, 15, 12, 0, "/driver/dac/dxc", "[.iref]", "Maximum d-axis current for reluctance torque generation. <0:disable>"))
dac_params.append(param_edit(tab, 3, 15, 12, 0, "/driver/dac/mtk", "", "The MTPA feedback gain. <0:direct map>"))

label = customtkinter.CTkLabel(tab, text="Compensation", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=35, columnspan=3, padx=5, sticky="we")
dac_params.append(param_edit(tab, 2, 35, 12, 0, "/driver/dac/tcc", "[.iref]", "Maximum d-axis current for the DC compensation. <0:disable>"))
dac_params.append(param_edit(tab, 3, 35, 12, 0, "/driver/dac/tdg", "", "Battery current compensator DC gain."))
dac_params.append(param_edit(tab, 4, 35, 12, 0, "/driver/dac/tqf", "", "Torque compensator Q-axis feedthrough ratio. <0:disable>"))

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/flux.png"), compound="left")
picture.grid(row=5, column=15, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")

################################################################################

tab = app.tabview.add("Advanced")
tab.grid_columnconfigure((1,2,3,15,16,17,35,36,37), weight=1)

label = customtkinter.CTkLabel(tab, text="REST", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=1, columnspan=3, padx=5, sticky="we")
limiter2_params.append(param_edit(tab, 2, 1, 12, 0, "/driver/rest/hinv", "", "UVW hall sensor polarity inversion."))
limiter2_params.append(param_edit(tab, 3, 1, 12, 1000000, "/driver/rest/edc", "[us]", "The estimator sensor latency compensation."))

label = customtkinter.CTkLabel(tab, text="Sensorless", font=customtkinter.CTkFont(size=15, weight="bold"))
label.grid(row=1, column=15, columnspan=3, padx=5, sticky="we")
limiter2_params.append(param_edit(tab, 2, 15, 12, 0, "/driver/rest/omega", "[erad/s]", "Asynchronous field speed."))
limiter2_params.append(param_edit(tab, 3, 15, 12, 0, "/driver/rest/assl", "[rpm]", "Auto-sensorless engage threshold. <0:disable>"))
limiter2_params.append(param_edit(tab, 4, 15, 12, 0, "/driver/rest/assh", "[rpm]", "Auto-sensorless release threshold. <0:disable>"))

picture = customtkinter.CTkLabel(tab, text="", image=tkinter.PhotoImage(file="siliUX/rest.png"), compound="left")
picture.grid(row=2, column=35, rowspan=10, columnspan=20, padx=10, pady=10, sticky="nsew")


################################################################################

app.bottom_frame = customtkinter.CTkFrame(app, fg_color="transparent")
app.bottom_frame.grid(row=22, column=0, columnspan=8, rowspan=2, pady=(5,15),  sticky="s")
app.bottom_frame.grid_columnconfigure((1,2,3), weight=1)


def save() :
    retval = my_node.executeSimple("save", "-y")
    if retval < 0:
        find_nodes.MessageBox("Saving parameters resulted into error " + str(retval))
    else:
        refresh()
        find_nodes.MessageBox("Saving of parameters was successful!")

save_button = customtkinter.CTkButton(app.bottom_frame, text=f"Save to flash !\n(confirm changes)", fg_color="red", command=save)
save_button.grid(row=1, column=1, padx=10, sticky="nsew")
CTkToolTip(save_button, message="Your new values will only live in the device until the next power cycle.\nIf you want to make them stay permanently, use this button.")

def load() :
    retval = my_node.executeSimple("load", "-y")
    if retval < 0:
        find_nodes.MessageBox("Loading parameters resulted into error " + str(retval))
    else:
        refresh()
        find_nodes.MessageBox("Loading was successful!")

load_button = customtkinter.CTkButton(app.bottom_frame, text=f"Load from flash !\n(discard changes)", fg_color="green", command=load)
load_button.grid(row=1, column=2, padx=10, sticky="nsew")
CTkToolTip(load_button, message="The previous values may be restored with this button (unless you've already saved the new ones).")

def restore() :
    #retval = my_node.executeSimple("restore", "-ry", "/driver") # doesn't work
    retval = my_node.executeSimple("restore", "-y")
    if retval < 0:
        find_nodes.MessageBox("Restoring parameters resulted into error " + str(retval))
    else:
        refresh()
        find_nodes.MessageBox("Restoring default values was successful.\nDon't forget to save, if you plan to keep them!")

restore_button = customtkinter.CTkButton(app.bottom_frame, text=f"Restore default values !\n(use factory settings)", command=restore)
restore_button.grid(row=1, column=3, padx=10, sticky="nsew")
CTkToolTip(restore_button, message="Return to the original, factory settings for this power cycle.")

################################################################################
# start the loop !

#if a single node is fetched, load it automatically
if len(nodenames) == 1:
    nodeselect_button.set(nodenames[0])
    node_select_callback(nodenames[0])
else :
    nodeselect_button.set("NONE")
    node_select_callback("NONE")

app.mainloop()
