sys.path.append('./siliUX')

import tkinter
import math
import customtkinter

from ctk_tooltip import *

# customtkinter.set_appearance_mode("Dark")  # Modes: "System" (standard), "Dark", "Light"
# customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

import find_nodes
nodes, nodenames = find_nodes.find("esc")

# configure grid layout (4x4)
# https://www.pythontutorial.net/tkinter/tkinter-grid/
app = customtkinter.CTk()
app.title("siliSpin (ESCx)")
app.attributes("-topmost", 1)
app.geometry(f"{600}x{600}")
app.grid_columnconfigure((0,1,2), weight=1)
app.grid_rowconfigure((20,21,22), weight=1)
app.attributes("-topmost", 0)
app.iconbitmap("siliUX/SiliXcon.ico")


################################################################################


app.top_frame = customtkinter.CTkFrame(app, fg_color="transparent")
app.top_frame.grid(row=0, column=0, columnspan=8, padx=(10, 10), pady=(10, 10), sticky="sew")
app.top_frame.grid_columnconfigure((3,4,5), weight=1)


def node_select_callback(value):
    global my_node
    my_node = nodes[nodenames.index(value)]

def show_emgui():
    sxapi.show()

emgui_switch = customtkinter.CTkButton(app.top_frame, text=f"", command=show_emgui, image=tkinter.PhotoImage(file="siliUX/main.png"), width=5)
emgui_switch.grid(row=0, column=0, padx=(10,0))

nodeselect_label = customtkinter.CTkLabel(app.top_frame, text="Select device to command:", font=customtkinter.CTkFont(size=15, weight="bold"))
nodeselect_label.grid(row=0, column=3, padx=10, sticky="e")

nodeselect_button = customtkinter.CTkSegmentedButton(app.top_frame, command=node_select_callback)
nodeselect_button.configure(values=nodenames, selected_color="green")
nodeselect_button.grid(row=0, column=4, pady=5, sticky="w")

icon_light=tkinter.PhotoImage(file="siliUX/light.png")
icon_dark=tkinter.PhotoImage(file="siliUX/dark.png")

apperance = 0
def change_appearance_mode_event():
    global apperance
    if apperance:
        customtkinter.set_appearance_mode("light")
        apperance_switch.configure(image=icon_dark)
        apperance = 0
    else:
        customtkinter.set_appearance_mode("dark")
        apperance_switch.configure(image=icon_light)
        apperance = 1

apperance_switch = customtkinter.CTkButton(app.top_frame, text=f"", command=change_appearance_mode_event, image=icon_dark, width=5)
apperance_switch.grid(row=0, column=5, padx=5, pady=5, sticky="e")


################################################################################

modes = [   "FRW",
            "VLT",
            "CRT",
            "VLF",
            "VLB",
            "SCR",
            "TRQ",
            "BCR",
            "SBR",
            "TBR",
            "ABR",
            "RES",
            "RES",
            "RES",
            "SVC",
            "SHR"  ]


class preset_tab:
    def run(self) :
        mode = modes.index(self.modebox.get())

        if checkbox_spd.get() :
           mode = mode | 0x10

        if checkbox_pos.get() :
           mode = mode | 0x20

        my_node.executeSimple("run", str(round(self.cmdbar0.get(),2)), str(mode), str(round(imultbar.get(),2)), str(round(umultbar.get(),2)), str(round(rmultbar.get(),2)))

    def setlabel(self, value) :
        self.cmdlabel0.configure(text=str(round(value,2)))
        if checkbox_follow.get() :
           self.run()

    def __init__(self, r, c, initval) :
        self.cmdbar0 = customtkinter.CTkSlider(app, from_=-1, to=1, progress_color="transparent", command=self.setlabel)
        self.cmdbar0.grid(row=r, column=0, padx=5, columnspan=3, sticky="ew")
        CTkToolTip(self.cmdbar0, message="Choose the command level for this preset.")
        self.cmdlabel0 = customtkinter.CTkLabel(app, text="0.0", font=customtkinter.CTkFont(size=20, weight="bold"), width=80)
        self.cmdlabel0.grid(row=r, column=5)
        self.cmdbar0.set(initval)
        self.setlabel(initval)
        self.modebox = customtkinter.CTkComboBox(app, values=modes)
        self.modebox.set("VLT")
        self.modebox.grid(row=r, column=6, padx=5, pady=5)
        CTkToolTip(self.modebox, message="Choose the control mode for this preset.")
        self.runbutton = customtkinter.CTkButton(app, text="Run", command=self.run)
        self.runbutton.grid(row=r, column=7, padx=5, pady=5)

imultlabel = customtkinter.CTkLabel(app, text="imult\n1", font=customtkinter.CTkFont(weight="bold"), height=80)
imultlabel.grid(row=20, column=0)
imultbar = customtkinter.CTkSlider(app, from_=0, to=1, progress_color="transparent", orientation="vertical", command = lambda value : imultlabel.configure(text="imult\n"+str(round(value,2))))
imultbar.grid(row=21, column=0, rowspan=2, pady=5)
imultbar.set(1)
CTkToolTip(imultbar, message="Current multiplier.\nSlide to adjust the torque generating current,\nor keep at maximum to use the entire range.")

rmultlabel = customtkinter.CTkLabel(app, text="rmult\n1", font=customtkinter.CTkFont(weight="bold"), height=80)
rmultlabel.grid(row=20, column=1)
rmultbar = customtkinter.CTkSlider(app, from_=0, to=1, progress_color="transparent", orientation="vertical", command = lambda value : rmultlabel.configure(text="rmult\n"+str(round(value,2))))
rmultbar.grid(row=21, column=1, rowspan=2, pady=5)
rmultbar.set(1)
CTkToolTip(rmultbar, message="Current multiplier in volage brake mode.\nSlide to adjust the torque generating current in voltage brake,\nor keep at maximum to use the entire range.")

umultlabel = customtkinter.CTkLabel(app, text="umult\n1", font=customtkinter.CTkFont(weight="bold"), height=80)
umultlabel.grid(row=20, column=2)
umultbar = customtkinter.CTkSlider(app, from_=0, to=1, progress_color="transparent", orientation="vertical", command = lambda value : umultlabel.configure(text="umult\n"+str(round(value,2))))
umultbar.grid(row=21, column=2, rowspan=2, pady=5)
umultbar.set(1)
CTkToolTip(umultbar, message="Volage multiplier.\nSlide to adjust the available voltage for the torque generation,\nor keep at maximum to use the entire range.")


checkbox_follow = customtkinter.CTkCheckBox(app, text="follow")
checkbox_follow.grid(row=20,  column=5, rowspan=3,columnspan=2, pady=(20, 20), padx=20, sticky="nw")
CTkToolTip(checkbox_follow, message="Check to make the command follow the sliders (no need to hit the 'run' button).")

checkbox_spd = customtkinter.CTkSwitch(app, text="speed loop")
checkbox_spd.grid(row=20, column=5, rowspan=3, columnspan=2, pady=(20, 20), padx=20, sticky="w")
CTkToolTip(checkbox_spd, message="Check to engage the speed control loop.")

checkbox_pos = customtkinter.CTkSwitch(app, text="position loop")
checkbox_pos.grid(row=20, column=5, rowspan=3, columnspan=2, pady=(20, 20), padx=20, sticky="sw")
CTkToolTip(checkbox_pos, message="Check to engage the position control loop.")

def stop():
   my_node.executeSimple("stop")

stopbutton = customtkinter.CTkButton(app, text="Stop", fg_color="red", command=stop)
stopbutton.grid(row=20, rowspan=2, column=7, padx=5, pady=5, sticky="nsew")
CTkToolTip(stopbutton, message="Hit to force freewheeling mode.")

def release():
   my_node.executeSimple("run")

releasebutton = customtkinter.CTkButton(app, text="Release", fg_color="green", command=release)
releasebutton.grid(row=22, rowspan=2, column=7, padx=5, pady=5, sticky="nsew")
CTkToolTip(releasebutton, message="Hit to give back the control (to the user application).")

preset_tab(1, 0, 0.1)
preset_tab(2, 0, 0.2)
preset_tab(3, 0, 0.3)
preset_tab(4, 0, 0.4)
preset_tab(5, 0, 0.5)
preset_tab(6, 0, 0.6)
preset_tab(7, 0, 0.7)
preset_tab(8, 0, 0.8)
preset_tab(9, 0, 0.9)
preset_tab(10, 0, 1.0)

app.mainloop()
