
sys.path.append('./siliUX')

import tkinter
import math
import customtkinter
import codetostr

customtkinter.set_appearance_mode("Dark")  # Modes: "System" (standard), "Dark", "Light"
# customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

def MessageBox(message):
    app = customtkinter.CTk()
    app.attributes("-topmost", 1)
    app.eval("tk::PlaceWindow . center")
    app.title("siliWatch (ESCx VECTOR)")
    customtkinter.CTkLabel(app, text=message).pack(padx=20, pady=20)
    customtkinter.CTkButton(app, text=f"OK", command=app.destroy).pack(padx=20, pady=20)
    app.mainloop()


# Connect to the node
try:
    nodeCount = sxapi.search(dummy=1)
    if nodeCount < 1:
        nodeCount2 = sxapi.search()
        if nodeCount2 < 1:
            MessageBox("No nodes found: " + str(nodeCount2))
            raise ValueError()  # no other way to kill the script without exitting emgui
        nodeCount = nodeCount2

except sxapi.error as e:
    # tkinter.messagebox.showerror("Error", "Failed to connect to the device")
    exit()

nodes = []
nodenames = []

for i in range(nodeCount):
    newNode = sxapi.node(i, iomode=3) # TODO explore other iomode options for better responsiveness and safety
    if newNode.hwid().decode()[:3] == "esc":
        nodes.append(newNode)
        nodenames.append(newNode.name.decode() + " (" + newNode.address.decode() + ")")

if len(nodes) < 1:
    MessageBox("None of the nodes is an ESCx member!")
    raise ValueError()  # no other way to kill the script without exitting emgui

nodenames.append("STOP")

update_group0_id = None
update_group1_id = None
update_group2_id = None
update_group3_id = None

def cancel_updates():
    app.nodeselect_button.configure(selected_color="red")
    if update_group0_id:
        app.after_cancel(update_group0_id)
    if update_group1_id:
        app.after_cancel(update_group1_id)
    if update_group2_id:
        app.after_cancel(update_group2_id)
    if update_group3_id:
        app.after_cancel(update_group3_id)

def update_group0():
    try:
        app.templabel.configure(text=str(round(drivertemp.get(),1))+"\N{DEGREE SIGN}C")

        temp = ptctemp.get()
        if math.isnan(temp) :
            app.ptctemplabel.configure(text=str("N/A"))
        else :
            app.ptctemplabel.configure(text=str(int(temp)))

        temp = rthermistor.get()
        if math.isnan(temp) :
            app.ohmlabel.configure(text=str("N/A"))
        else :
            app.ohmlabel.configure(text=str(int(temp))+" ohms")

        app.energylabel.configure(text=str(driverenergy.get())+"J")
        app.odolabel.configure(text=str(motorodo.get())+" revs")
        app.coulomblabel.configure(text=str(supplycap.get())+"mAh")

        global iref
        iref = driveriref.get()

        global update_group0_id
        update_group0_id = app.after(567, update_group0)

    except sxapi.error as e:
         cancel_updates()
         raise e


def update_group1():
    try:
        app.pwrlabel.configure(text=str(int(driverpower.get()))+"W")

        status_value = driverstat.get()
        app.stattext.delete("0.0", "end")  # delete all text
        app.stattext.insert("0.0", codetostr.stat2string(status_value))
        app.statlabel.configure(text="stat\n" + str(status_value))
        if status_value:
            app.statlabel.configure(fg_color="darkorange")
        else:
            app.statlabel.configure(fg_color="transparent")

        limit_value = driverlimit.get()
        app.limittext.delete("0.0", "end")  # delete all text
        app.limittext.insert("0.0", codetostr.limit2string(limit_value))
        app.limitlabel.configure(text="limit\n" + str(limit_value))
        if limit_value:
            app.limitlabel.configure(fg_color="green")
        else:
            app.limitlabel.configure(fg_color="transparent")

        error_value = drivererror.get()
        app.errortext.delete("0.0", "end")  # delete all text
        app.errortext.insert("0.0", codetostr.error2string(error_value))
        app.errorlabel.configure(text="error\n" + str(error_value))
        if error_value:
            app.errorlabel.configure(fg_color="red")
        else:
            app.errorlabel.configure(fg_color="transparent")

        if error_value:
            app.totallimitbar.configure(progress_color="red")
        elif status_value:
            app.totallimitbar.configure(progress_color="yellow")
        else:
            app.totallimitbar.configure(progress_color="green")

        app.totallimitbar.set(drivertotallimit.get())

        if driverenable.get():
            app.enablebar.configure(fg_color="grey", progress_color="blue")
        else:
            app.enablebar.configure(fg_color="grey", progress_color="grey")

        global update_group1_id
        update_group1_id = app.after(456, update_group1)

    except sxapi.error as e:
         cancel_updates()
         raise e

modes = [   "FRW",
            "VLT",
            "CRT",
            "VLF",
            "VLB",
            "SCR",
            "TRQ",
            "BCR",
            "SBR",
            "TBR",
            "ABR",
            "RES",
            "RES",
            "RES",
            "SVC",
            "SHR"  ]

def update_group2():
    try:
        app.rpmlabel.configure(text=" " + str(int(motorrpm.get()))+"\n RPM")

        app.imultbar.set(driverimult.get())
        app.umultbar.set(driverumult.get())

        cmd = drivercmd.get()
        app.cmdbar.set(cmd)
        mode = drivermode.get()

        app.modelabel.configure(text=" " + modes[mode&15] + " " + str(round(cmd, 2)))

        app.checkbox_pos.configure(state="enabled")
        app.checkbox_spd.configure(state="enabled")

        if mode&0x10:
           app.checkbox_spd.select()
        else:
           app.checkbox_spd.deselect()

        if mode&0x20:
           app.checkbox_pos.select()
        else:
           app.checkbox_pos.deselect()

        app.checkbox_pos.configure(state="disabled")
        app.checkbox_spd.configure(state="disabled")

        global update_group2_id
        update_group2_id = app.after(345, update_group2)

    except sxapi.error as e:
         cancel_updates()
         raise e

def update_group3():
    try:
        voltage = supplyvoltage.get()
        current = supplycurrent.get()

        app.battlabel.configure(text=" " + str(round(voltage,2)) + "V\n "+str(round(current,2)) + "A")

        currentq = motorcurrentq.get()
        voltageq = motorvoltageq.get()

        app.torquelabel.configure(text=str(round(voltageq,2)) + "V\n"+str(round(currentq,1)) + "A")

        currentd = motorcurrentd.get()
        voltaged = motorvoltaged.get()

        app.fluxlabel.configure(text=str(round(voltaged,2)) + "V\n"+str(round(currentd,1)) + "A")

        motcurrent = math.sqrt(currentq*currentq + currentd*currentd)
        app.motcurrentlabel.configure(text=str(round(motcurrent,2)) + "A / " + str(round(motcurrent/1.41,2)) + "Arms")
        app.motcurrentbar.configure(progress_color="green")

        motvoltage = math.sqrt(voltageq*voltageq + voltaged*voltaged) * 1.73205 #sqrt3
        app.motvoltagelabel.configure(text=str(round(motvoltage,2)) + "V / " + str(round(motvoltage/1.41,2)) + "Vrms")
        app.motvoltagebar.configure(progress_color="yellow")

        if voltage:
           app.motvoltagebar.set(motvoltage / voltage)

        if iref:
           app.batcurrentbar.set(current / iref)
           app.motcurrentbar.set(motcurrent / iref)

        global update_group3_id
        update_group3_id = app.after(234, update_group3)

    except sxapi.error as e:
         cancel_updates()
         raise e

# configure grid layout (4x4)
# https://www.pythontutorial.net/tkinter/tkinter-grid/
app = customtkinter.CTk()
app.title("siliWatch (ESCx VECTOR)")
app.attributes("-topmost", 1)
app.geometry(f"{950}x{750}")
app.grid_columnconfigure(1, weight=1)
app.grid_columnconfigure((2, 3), weight=0)
app.grid_rowconfigure(3, weight=1)

app.attributes("-topmost", 0)

def node_select_callback(value):
    cancel_updates()

    app.enablebar.configure(fg_color="black", progress_color="black")
    app.totallimitbar.configure(progress_color="black")
    app.nodeselect_button.configure(selected_color="red")
    app.modelabel.configure(text=" UNK")
    app.statlabel.configure(fg_color="transparent")
    app.limitlabel.configure(fg_color="transparent")
    app.errorlabel.configure(fg_color="transparent")
    app.motcurrentbar.configure(progress_color="grey")
    app.motvoltagebar.configure(progress_color="grey")
    #app.term_button.configure(state="disabled")
    #app.scope_button.configure(state="disabled")

    if value != "STOP":
        global my_node
        my_node = nodes[nodenames.index(value)]
        #app.term_button.configure(state="enabled")
        #app.scope_button.configure(state="enabled")

        #handle some of the exceptions - some variables are named differently in esc3 and esc5
        global driverpower
        try:
            driverpower = my_node.variable("/driver/power") #power at esc3
        except sxapi.error as e:
            driverpower = my_node.variable("/driver/powerf") #powerf at esc5

        try:
            #group0
            global drivertemp
            drivertemp = my_node.variable("/driver/temp")
            global ptctemp
            ptctemp = my_node.variable("/driver/ptctemp")
            global motorodo
            motorodo = my_node.variable("/driver/motor/odo")
            global driverenergy
            driverenergy = my_node.variable("/driver/energy")
            global supplycap
            supplycap = my_node.variable("/driver/supply/cap")
            global driveriref
            driveriref = my_node.variable("/driver/iref")
            global drivererror
            drivererror = my_node.variable("/driver/error")
            global rthermistor
            rthermistor = my_node.variable("/driver/motor/Rthermistor")

            update_group0()

            #group1
            global driverenable
            driverenable = my_node.variable("/driver/enable")
            global driverstat
            driverstat = my_node.variable("/driver/stat")
            global driverlimit
            driverlimit = my_node.variable("/driver/limit")
            global drivertotallimit
            drivertotallimit = my_node.variable("/driver/totallimit")

            update_group1()

            #group2
            global drivercmd
            drivercmd = my_node.variable("/driver/cmd")
            global drivermode
            drivermode = my_node.variable("/driver/mode")
            global driverimult
            driverimult = my_node.variable("/driver/iqmult")
            global driverumult
            driverumult = my_node.variable("/driver/uqmult")
            global motorrpm
            motorrpm = my_node.variable("/driver/motor/rpmf")

            update_group2()

            #group3
            global supplycurrent
            supplycurrent = my_node.variable("/driver/supply/currentf")
            global supplyvoltage
            supplyvoltage = my_node.variable("/driver/supply/voltage")
            global motorcurrentq
            motorcurrentq = my_node.variable("/driver/motor/currentqf")
            global motorcurrentd
            motorcurrentd = my_node.variable("/driver/motor/currentdf")
            global motorvoltageq
            motorvoltageq = my_node.variable("/driver/motor/voltageq")
            global motorvoltaged
            motorvoltaged = my_node.variable("/driver/motor/voltaged")

            update_group3()


            app.nodeselect_button.configure(selected_color="green")

        except sxapi.error as e:
            MessageBox("Could not bind to all the controller states!\n" + str(e))


app.nodeselect_button = customtkinter.CTkSegmentedButton(app, command=node_select_callback)
app.nodeselect_button.configure(values=nodenames, selected_color="red")
app.nodeselect_button.set("STOP")

app.nodeselect_button.grid(row=0, column=1, pady=5)

# create scope and term launchers

def show_emgui():
    sxapi.show()

app.emgui_switch = customtkinter.CTkButton(app, text=f"", command=show_emgui, image=tkinter.PhotoImage(file="siliUX/main.png"), width=5)
app.emgui_switch.grid(row=0, column=0, padx=(10,0), pady=10, sticky="w")

def open_scope():
    my_node.open("{scope} -t")

app.scope_button = customtkinter.CTkButton(app, text="", command=open_scope, image=tkinter.PhotoImage(file="siliUX/scope.png"), width=5)
app.scope_button.grid(row=0, column=0, padx=(70,0), pady=10, sticky="w")

def open_term():
    my_node.open("{term}")

app.term_button = customtkinter.CTkButton(app, text="", command=open_term, image=tkinter.PhotoImage(file="siliUX/term.png"), width=5)
app.term_button.grid(row=0, column=0, padx=(130,0), pady=10, sticky="w")


def change_appearance_mode_event(new_appearance_mode: str):
    customtkinter.set_appearance_mode(new_appearance_mode)

def change_scaling_event(app, new_scaling: str):
    new_scaling_float = int(new_scaling.replace("%", "")) / 100
    customtkinter.set_widget_scaling(new_scaling_float)

app.appearance_mode_optionemenu = customtkinter.CTkOptionMenu(app, values=["Dark", "Light", "System"], command=change_appearance_mode_event)
app.appearance_mode_optionemenu.grid(row=0, column=2, padx=10, pady=5, sticky="e")

# create sidebar frame with widgets
app.sidebar_frame = customtkinter.CTkFrame(app, fg_color="transparent")
app.sidebar_frame.grid(row=1, column=0, rowspan=4, padx=(10, 10), pady=(10, 10), sticky="nsew")
app.sidebar_frame.grid_rowconfigure(1, weight=1)


# create scrollable frame
app.scrollable_frame = customtkinter.CTkScrollableFrame(app.sidebar_frame, label_text="Data logging")
app.scrollable_frame.grid(row=1, column=0, columnspan=2, pady=5, sticky="nsew")
app.scrollable_frame.grid_columnconfigure(0, weight=1)

app.logctl_button = customtkinter.CTkSegmentedButton(app.scrollable_frame)
app.logctl_button.configure(values=["Stop", "Record", "Show"],  state="disabled")
app.logctl_button.set("Stop")
app.logctl_button.grid(row=0, column=0)

app.entry = customtkinter.CTkEntry(app.scrollable_frame, placeholder_text="my_log.csv", state="disabled")
app.entry.grid(row=1, column=0, pady=5)

group0 = [
            "battery current",
            "motor currents",
            "unfiltered motor currents",
            "motor current references",
            "battery voltage",
            "motor voltages",
            "rms motor voltage and current",
            "total motor voltage and current",
            "motor RPM",
            "error",
            "stat and limit",
            "power",
            "temperatures",
            "motor temp resistance",
            "command and mode",
            "command multipliers",
        ]

app.scrollable_frame_switches = []
for i in range(len(group0)):
    switch = customtkinter.CTkCheckBox(master=app.scrollable_frame, text=group0[i], state="disabled")
    switch.grid(row=i + 2, column=0, pady=5, sticky="w")
    app.scrollable_frame_switches.append(switch)


# create scope control tabview

app.tabview = customtkinter.CTkTabview(app.sidebar_frame, width=200, height=200)
app.tabview.grid(row=3, column=0, columnspan=2, pady=5, sticky="nsew")


class plot_tab:
    index = 0
    user_event = None
    def erase_event(self):
        my_node.executeSimple("legend", "-p" + str(self.index), "-c20", "99", "113")

    def autoset_event(self):
        my_node.executeSimple("legend", "-p" + str(self.index), "-c24", "13", "0") # a bug workaround: YOS only sends payload in multiply of 4 bytes, we must send a dummy zero

    def state_update(self):
        plot_state = my_node.executeSimple("period", "-p" + str(self.index), "-g", "-c")
        self.clear_button.configure(text="Clear\n" + str((plot_state>>16)&7))

    def clear_event(self):
        my_node.executeSimple("plot", "-p" + str(self.index), "-c")
        self.state_update()

    def period_event(self, val):
        my_node.executeSimple("period", "-p" + str(self.index), val.split(" ", 1)[0])
        print("-p" + str(self.index))
        self.state_update()

    def plot_event(self, val):
        self.user_event(val)
        self.state_update()

    def __init__(self, name, idx, event, vals) :
        app.tabview.add(name)
        app.tabview.tab(name).grid_columnconfigure((0,1,2,3), weight=1)
        self.index = idx
        self.user_event = event
        self.valuemenu = customtkinter.CTkOptionMenu(app.tabview.tab(name), dynamic_resizing=False, values=vals, command=self.plot_event)
        self.valuemenu.grid(row=0, column=0, columnspan=3, padx=10, pady=(20, 10))
        self.periodbox = customtkinter.CTkComboBox(app.tabview.tab(name), values=["1 ms", "2 ms", "5 ms", "10 ms", "20 ms", "50 ms", "100 ms"], command=self.period_event)
        self.periodbox.set("10 ms")
        self.periodbox.grid(row=1, column=0, columnspan=3, padx=10, pady=10)
        self.clear_button = customtkinter.CTkButton(app.tabview.tab(name), text="Clear", command=self.clear_event, border_width=2, width=5)
        self.clear_button.grid(row=0, column=3, rowspan=2, padx=5, pady=5)
        self.release_button = customtkinter.CTkButton(app.tabview.tab(name), text="Release", command=self.erase_event, width=5)
        self.release_button.grid(row=2, column=2, columnspan=2, padx=5, pady=5, sticky="w")
        self.autoset_button = customtkinter.CTkButton(app.tabview.tab(name), text="Autoset", command=self.autoset_event, width=5)
        self.autoset_button.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="e")


def plot_event0(val):
    if val=="battery current":
        my_node.executeSimple("plot", "-p0", "/driver/supply/currentf")
    if val=="motor currents":
        my_node.executeSimple("plot", "-p0", "/driver/motor/currentqf", "/driver/motor/currentdf")
    if val=="unfiltered motor currents":
        my_node.executeSimple("plot", "-p0", "/driver/motor/currentq", "/driver/motor/currentd")
    if val=="motor current references":
        my_node.executeSimple("plot", "-p0", "/driver/debug_core/Iqref", "/driver/debug_core/Idref")

plot0 = plot_tab("plot0", 0, plot_event0, ["battery current", "motor currents", "unfiltered motor currents", "motor current references"])

def plot_event1(val):
    if val=="battery voltage":
        my_node.executeSimple("plot", "-p1", "/driver/supply/voltage")
    if val=="motor voltages":
        my_node.executeSimple("plot", "-p1", "/driver/motor/voltageq", "/driver/motor/voltaged")
    if val=="motor voltage references":
        my_node.executeSimple("plot", "-p1", "/driver/debug_core/Uqref", "/driver/debug_core/Udref")

plot1 = plot_tab("plot1", 1, plot_event1, ["battery voltage", "motor voltages", "motor voltage references"])

def plot_event2(val):
    if val=="power":
        my_node.executeSimple("plot", "-p2", "/driver/power")
    if val=="motor speed":
        my_node.executeSimple("plot", "-p2", "/driver/motor/rpmf")
    if val=="tempreatures":
        my_node.executeSimple("plot", "-p2", "/driver/temp", "/driver/ptctemp")
    if val=="motor temperature (resistance)":
        my_node.executeSimple("plot", "-p2", "/driver/motor/rthermistor")

plot2 = plot_tab("plot2", 2, plot_event2, ["power", "motor speed", "tempreatures", "motor temperature (resistance)"])

def plot_event3(val):
    if val=="stat and limit":
        my_node.executeSimple("plot", "-p3", "/driver/stat", "/driver/limit")
    if val=="totallimit":
        my_node.executeSimple("plot", "-p3", "/driver/totallimit")
    if val=="command and mode":
        my_node.executeSimple("plot", "-p3", "/driver/cmd", "/driver/mode")
    if val=="command multipliers":
        my_node.executeSimple("plot", "-p3", "/driver/iqmult", "/driver/uqmult")

plot3 = plot_tab("plot3", 3, plot_event3, ["stat and limit", "totallimit", "command and mode", "command multipliers"])




app.drv_frame = customtkinter.CTkFrame(app)
app.drv_frame.grid(row=1, column=1, padx=(10, 10), pady=(10, 10), sticky="nsew")
app.drv_frame.grid_columnconfigure(1, weight=1)
app.drv_frame.grid_rowconfigure(0, weight=1)

app.templabel = customtkinter.CTkLabel(app.drv_frame, text="0\N{DEGREE SIGN}C", font=customtkinter.CTkFont(size=20, weight="bold"), image=tkinter.PhotoImage(file="siliUX/temp.png"), compound="left")
app.templabel.grid(row=0, column=0, rowspan=3, padx=0, sticky="w")

app.pwrlabel = customtkinter.CTkLabel(app.drv_frame, text="0W", pady=5, font=customtkinter.CTkFont(size=40, weight="bold"), image=tkinter.PhotoImage(file="siliUX/transistor.png"), compound="left")
app.pwrlabel.grid(row=0, column=1)

app.energylabel = customtkinter.CTkLabel(app.drv_frame, text="0J", image=tkinter.PhotoImage(file="siliUX/counter.png"), compound="left")
app.energylabel.grid(row=1, column=1)

app.ptctemplabel = customtkinter.CTkLabel(app.drv_frame, text="0", font=customtkinter.CTkFont(size=20, weight="bold"), image=tkinter.PhotoImage(file="siliUX/templimit.png"), compound="left")
app.ptctemplabel.grid(row=0, column=2, rowspan=3, padx=(0,20), sticky="e")

#TODO consider other widget to indicate enable state (e.g. icon)
app.enablebar = customtkinter.CTkProgressBar(app.drv_frame, orientation="horizontal")
app.enablebar.grid(row=2, column=1, padx=(10, 10), pady=(10, 10), sticky="ns")
app.enablebar.configure(progress_color="black", fg_color="black") #, mode="indeterminate")
app.enablebar.set(1)
#app.enablebar.start()

app.limiter_frame = customtkinter.CTkFrame(app)
app.limiter_frame.grid(row=2, column=1, rowspan=2, padx=(10, 10), pady=(10, 10), sticky="nsew")
app.limiter_frame.grid_columnconfigure((0, 1, 2), weight=1)
app.limiter_frame.grid_rowconfigure(1, weight=1)

app.errorlabel = customtkinter.CTkLabel(app.limiter_frame, text="error\n0", image=tkinter.PhotoImage(file="siliUX/stop.png"), width=120, compound="left")
app.errorlabel.grid(row=0, column=0, padx=(10, 10), pady=(10, 10), sticky="nw")
app.errortext = customtkinter.CTkTextbox(app.limiter_frame)  # , state="disabled")
app.errortext.grid(row=1, column=0, padx=(10, 10), pady=(10, 10), sticky="nsew")

app.statlabel = customtkinter.CTkLabel(app.limiter_frame, text="stat\n0", image=tkinter.PhotoImage(file="siliUX/warning.png"), width=120, compound="left")
app.statlabel.grid(row=0, column=1, padx=(10, 10), pady=(10, 10), sticky="nw")
app.stattext = customtkinter.CTkTextbox(app.limiter_frame)  # , state="disabled")
app.stattext.grid(row=1, column=1, padx=(10, 10), pady=(10, 10), sticky="nsew")

app.limitlabel = customtkinter.CTkLabel(app.limiter_frame, text="limit\n0", image=tkinter.PhotoImage(file="siliUX/limit.png"), width=120, compound="left")
app.limitlabel.grid(row=0, column=2, padx=(10, 10), pady=(10, 10), sticky="nw")
app.limittext = customtkinter.CTkTextbox(app.limiter_frame)  # , state="disabled")
app.limittext.grid(row=1, column=2, padx=(10, 10), pady=(10, 10), sticky="nsew")

app.totallimitbar = customtkinter.CTkProgressBar(app.limiter_frame, height=20, progress_color="black")
app.totallimitbar.grid(row=2, column=0, columnspan=3, padx=(10, 10), pady=(10, 10), sticky="ew")
app.totallimitbar.set(1)

app.cmd_frame = customtkinter.CTkFrame(app)
app.cmd_frame.grid(row=4, column=1, padx=(10, 10), pady=(10, 10), sticky="nsew")
app.cmd_frame.grid_columnconfigure(2, weight=1)
app.cmd_frame.grid_rowconfigure(0, weight=1)

app.umultbar = customtkinter.CTkProgressBar(app.cmd_frame, orientation="vertical")
app.umultbar.grid(row=0, column=0, rowspan=4, padx=(10, 10), pady=(10, 10), sticky="ns")

app.checkbox_spd = customtkinter.CTkSwitch(master=app.cmd_frame, text="speed loop", state="disabled")
app.checkbox_spd.grid(row=2, column=1, pady=(20, 20), padx=20, sticky="nw")
app.checkbox_pos = customtkinter.CTkSwitch(master=app.cmd_frame, text="position loop", state="disabled")
app.checkbox_pos.grid(row=2, column=2, pady=(20, 20), padx=20, sticky="nw")

app.modelabel = customtkinter.CTkLabel(app.cmd_frame, text=" UNK", font=customtkinter.CTkFont(size=40, weight="bold"), image=tkinter.PhotoImage(file="siliUX/joystick.png"), compound="left")
app.modelabel.grid(row=0, column=0, columnspan=3)

#app.cmdlabel = customtkinter.CTkLabel(app.cmd_frame, text="0.0", font=customtkinter.CTkFont(size=40, weight="bold"))
#app.cmdlabel.grid(row=0, column=0, columnspan=2)

app.cmdbar = customtkinter.CTkSlider(app.cmd_frame, from_=-1, to=1, state="disabled", progress_color="transparent", height=30)
app.cmdbar.grid(row=1, column=1, columnspan=2, padx=(10, 10), pady=(10, 10), sticky="ew")

app.imultbar = customtkinter.CTkProgressBar(app.cmd_frame, orientation="vertical")
app.imultbar.grid(row=0, column=3, rowspan=4, padx=(10, 10), pady=(10, 10), sticky="ns")

#app.rmultbar = customtkinter.CTkProgressBar(app.cmd_frame, orientation="vertical")
#app.rmultbar.grid(row=0, column=4, rowspan=4, padx=(10, 10), pady=(10, 10), sticky="ns")

app.battery_frame = customtkinter.CTkFrame(app)
app.battery_frame.grid(row=1, column=2, rowspan=2, padx=(10, 10), pady=(10, 10), sticky="nsew")
app.battery_frame.grid_columnconfigure(0, weight=1)
app.battery_frame.grid_rowconfigure(0, weight=1)

app.battlabel = customtkinter.CTkLabel(app.battery_frame, text="0.0V\n0.0A", font=customtkinter.CTkFont(size=20, weight="bold"), image=tkinter.PhotoImage(file="siliUX/battery.png"), compound="left")
app.battlabel.grid(row=0, column=0, pady=10, padx=(30,0), sticky="w")

app.coulomblabel = customtkinter.CTkLabel(app.battery_frame, text="0mAh", image=tkinter.PhotoImage(file="siliUX/counter.png"), compound="left")
app.coulomblabel.grid(row=1, column=0)

app.batcurrentbar = customtkinter.CTkSlider(app.battery_frame, from_=-1, to=1, state="disabled", progress_color="transparent", height=30)
app.batcurrentbar.grid(row=2, column=0, padx=(10, 10), pady=(10, 10), sticky="ns")

app.motor_frame = customtkinter.CTkFrame(app)
app.motor_frame.grid(row=3, column=2, rowspan=2, padx=(10, 10), pady=(10, 10), sticky="nsew")
app.motor_frame.grid_columnconfigure(0, weight=1)
app.motor_frame.grid_columnconfigure(1, weight=1)
app.motor_frame.grid_rowconfigure((0,2,4,6,10), weight=1)

app.rpmlabel = customtkinter.CTkLabel(app.motor_frame, text="0\nRPM", font=customtkinter.CTkFont(size=20, weight="bold"), image=tkinter.PhotoImage(file="siliUX/motor.png"), compound="left")
app.rpmlabel.grid(row=0, column=0, columnspan=2, sticky="nsew")

app.fluxlabel = customtkinter.CTkLabel(app.motor_frame, text="0A\0V", font=customtkinter.CTkFont(size=20, weight="bold"), image=tkinter.PhotoImage(file="siliUX/flux.png"), compound="top")
app.fluxlabel.grid(row=2, column=0, sticky="nsew")

app.torquelabel = customtkinter.CTkLabel(app.motor_frame, text="0A\0V", font=customtkinter.CTkFont(size=20, weight="bold"), image=tkinter.PhotoImage(file="siliUX/torque.png"), compound="top")
app.torquelabel.grid(row=2, column=1, sticky="nsew")

app.motvoltagelabel = customtkinter.CTkLabel(app.motor_frame, text="0V / 0Vrms")
app.motvoltagelabel.grid(row=4, column=0, columnspan=2, pady=(0,0))

app.motvoltagebar = customtkinter.CTkProgressBar(app.motor_frame, height=10)
app.motvoltagebar.grid(row=5, column=0, columnspan=2, pady=(0, 10), sticky="ns")

app.motcurrentlabel = customtkinter.CTkLabel(app.motor_frame, text="0A / 0Arms")
app.motcurrentlabel.grid(row=6, column=0, columnspan=2, pady=(10,0))

app.motcurrentbar = customtkinter.CTkProgressBar(app.motor_frame, height=10)
app.motcurrentbar.grid(row=8, column=0, columnspan=2, pady=(0, 0), sticky="ns")

app.odolabel = customtkinter.CTkLabel(app.motor_frame, text="0 revs", image=tkinter.PhotoImage(file="siliUX/counter.png"), compound="top")
app.odolabel.grid(row=10, column=0, pady=15)

app.ohmlabel = customtkinter.CTkLabel(app.motor_frame, text="0 ohms", image=tkinter.PhotoImage(file="siliUX/ohm.png"), compound="top" )
app.ohmlabel.grid(row=10, column=1, pady=15)



app.mainloop()
