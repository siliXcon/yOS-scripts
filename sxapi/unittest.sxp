sxapi.print(" ")
sxapi.print("--- Beginning of the script ---")
sxapi.print(" ")
sxapi.print("--- Printing to the console ---")
sxapi.print("One piece of text")

# You can combine Integers, Floats, and Strings (Unicode and Bytes). All parts will be separated by a white-space.
sxapi.print("A variable value = [", 5, ",", 57.657, "]")

sxapi.print(" ")
sxapi.print("--- Handling exceptions ---")
v = None
try:
	sxapi.print(v)
except sxapi.error as e:
	sxapi.print(e.code, e.message)
	# Another way to get the error message:
	sxapi.print(str(e))

sxapi.print(" ")
sxapi.print("--- Getting a node ---")
# First of all, you have to to perform search if it has not been done before.
# It returns a negative Integer if something was going wrong.
if sxapi.search() < 0 :
	exit()

# Or, you can use try-except:
#try:
#	sxapi.search()
#except sxapi.error as e:
#	sxapi.print(str(e))

# You can create a variable of NodeType that is associated with the node in the emGUI database.
# You have to specify either its name or address. All of the following examples result in same behavior
n1 = sxapi.node(0)
n2 = sxapi.node(address = 0)
n3 = sxapi.node(name = "AM-serpent")
n4 = sxapi.node("AM-serpent")

# n1, ..., n4 are different NodeType objects that are associated with the same emGUI database's node
sxapi.print(str(n1))
sxapi.print(str(n2))
sxapi.print(str(n3))
sxapi.print(str(n4))

# This can be used to check whether a node has been taken or not
try:
	n5 = sxapi.node(23)
except sxapi.error as e:
	sxapi.print(str(e))	

sxapi.print(" ")
sxapi.print("--- Getting the node's info ---")
# You can get HWID, SWID, UUID, CLS and serial number of a node two ways.
# 1 way/ The result is a dictionary
info = n1.info()
sxapi.print(str(info))
# 2 way/ The result of each of the functions is a Bytes object
sxapi.print("Node name =", n1.name, ", HWID =", n1.hwid())
sxapi.print("Node name =", n1.name, ", SWID =", n1.swid())
sxapi.print("Node name =", n1.name, ", UUID =", n1.uuid())
sxapi.print("Node name =", n1.name, ", class =", n1.cls())
sxapi.print("Node name =", n1.name, ", serial number =", n1.sn())

sxapi.print(" ")
sxapi.print("--- Getting variables for a node ---")
# You can create a variable that represents State variable, Dynamic variable, Permanent variable, or Parameter.
# You have to specify its path as a String. The following two variants result in same behavior.
# Named parameters don't work here, i.e "v = n1.variable(path = "/driver/error")" failed.
try:
	var_swdt = n1.variable("/driver/debug/swdt")
	var_ticks = n1("/vars/ticks")
	var_maxtemp = n1("/permanents/total/maxtemp")
	var_kr = n1("/driver/kr")
	var_unexpected = n1("/unexpected/name")
except sxapi.error as e:
	sxapi.print(str(e))

# These show the path of a variable (the path is a String)
sxapi.print(var_swdt.path)
sxapi.print(var_ticks.path)
sxapi.print(var_maxtemp.path)
sxapi.print(var_kr.path)

sxapi.print(" ")
sxapi.print("--- Executing a command on the node ---")
n1.executeSimple("set", "ticks", "0")

# This will cause script to fail
#sxapi.print(unexpected.path)

# You can get the type of a variable using cls() method.
# The result is a tuple (type_code, type_name)
# The type_code is an Integer, the type_name is a Bytes object
sxapi.print(str(var_swdt.cls()))
sxapi.print(str(var_ticks.cls()))
sxapi.print(str(var_maxtemp.cls()))
sxapi.print(str(var_kr.cls()))

sxapi.print(" ")
sxapi.print("--- Getting values of variables ---")
# These show the path and the value of a variable as a String
sxapi.print(str(var_swdt))
sxapi.print(str(var_ticks))
sxapi.print(str(var_maxtemp))
sxapi.print(str(var_kr))

# These are the two ways to get the value of a variable.
# The value is processed according to the variable's IOMode property  when .get() is issued,
# otherwise the value from emGUI database is presented.
v1 = var_swdt.get()
v2 = var_ticks()
v3 = var_maxtemp()
v4 = var_kr()

# The type of a value can be Integer, String, Float, or List of one of the listed types
sxapi.print("/driver/debug/swdt =", str(v1).strip('[]'), "Type:", str(type(v1)))
sxapi.print("/vars/ticks =", v2, "Type:", str(type(v2)))
sxapi.print("/permanents/total/maxtemp =", v3, "Type:", str(type(v3)))
sxapi.print("driver/kr =", v4, "Type:", str(type(v4)))

sxapi.print(" ")
sxapi.print("--- Getting features of a Parameter ---")
# These get default value, minimal and maximal values, step, and flags of a Parameter
# All returned values are Strings
sxapi.print(var_kr.path, "(default value) =", var_kr.default())
sxapi.print(var_kr.path, "(minimum) =", var_kr.min())
sxapi.print(var_kr.path, "(maximum) =", var_kr.max())
sxapi.print(var_kr.path, "(step) =", var_kr.step())
sxapi.print(var_kr.path, "(flags) =", var_kr.flags())

# Only Parameters have the listed features
# This will cause script to fail
#sxapi.print(var_swdt.path, "(default value) =", var_swdt.default())

sxapi.print(" ")
sxapi.print("--- Setting the value of a variable ---")
# random library is used for demonstration purpose only
import random

# You can set the value of a Parameter or Dynamic variable only
# The value is processed according to the IOMode property of the given variable
sxapi.print(var_kr.path, "(float) =", var_kr.get(), "(before)")
if var_kr.set(random.random()):	
	sxapi.print("The value was succefully set")
sxapi.print(var_kr.path, "(float) =", var_kr.get(), "(after)")

sxapi.print(var_ticks.path, "(uint8) =", var_ticks.get(), "(before)")
if var_ticks.set(random.randint(0, 255)):
	sxapi.print("The value was succefully set")
sxapi.print(var_tick.path, "(uint8) =", var_ticks.get(), "(after)")

# If you try to set the value that is out of range, script will not fail
try:
	sxapi.print(var_ticks.path, "(uint8) =", var_ticks.get(), "(before)")
	if var_ticks.set(400000000):
		sxapi.print("The value was succefully set")
	sxapi.print(var_ticks.path, "(uint8) =", var_ticks.get(), "(after)")
except sxapi.error as e:
	sxapi.print(str(e))

# If you try to set the value of unrelated type (i.e. String -> uint8), script will fail
#try:
#	sxapi.print(var_ticks.path, "(uint8) =", var_ticks.get(), "(before)")
#	if var_ticks.set("value"):
#		sxapi.print("The value was succefully set")
#	sxapi.print(var_ticks.path, "(uint8) =", var_ticks.get(), "(after)")
#except sxapi.error as e:
#	sxapi.print(str(e))

sxapi.print(" ")
sxapi.print("--- Setting and getting in a loop ---")
counter = 0
bad_counter = 0
while counter < 10 :
	value = random.random()
	if var_kr.set(value):
		sxapi.print("The value", value, "was successfully set")
		got_value = var_kr()
		sxapi.print(var_kr.path, "=", got_value)
		if round(value, 3) != round(got_value, 3):
			sxapi.print("Set and got values are not equal")
			bad_counter = bad_counter + 1
	else :
		sxapi.print("Something bad happened (", value, ")")
		bad_counter = bad_counter + 1
	counter = counter + 1

sxapi.print("Counter is equal to", counter, "Counter of failures is equal to", bad_counter)
if bad_counter == 0:
	sxapi.print("No issues tracked")

sxapi.print(" ")
sxapi.print("--- Getting version of the module ---")
try:
	sxapi.print(sxapi.version())
except sxapi.error as e:
	sxapi.print(str(e))

sxapi.print(" ")
sxapi.print("--- End of the script ---")
sxapi.print(" ")